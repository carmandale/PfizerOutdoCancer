#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "Root"
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Material "M_baseObjectMaterial"
    {
        asset inputs:ao = @@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1106.844, 927.20465)
                    int stackingOrderInSubgraph = 314
                }
            }
        )
        asset inputs:diffuse = @@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-565.5158, -221.40616)
                    int stackingOrderInSubgraph = 259
                }
            }
        )
        asset inputs:emissive = @@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-998.94934, -143.22949)
                    int stackingOrderInSubgraph = 263
                }
            }
        )
        float inputs:emissiveAmount = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-682.28125, -3.0546875)
                    int stackingOrderInSubgraph = 267
                }
            }
        )
        float inputs:fingerPrintSize = 8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1938.2625, 586.13245)
                    int stackingOrderInSubgraph = 1174
                }
            }
        )
        asset inputs:metallic = @@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1107.9846, 716.37646)
                    int stackingOrderInSubgraph = 314
                }
            }
        )
        asset inputs:normal = @@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1407.7433, -15.71373)
                    int stackingOrderInSubgraph = 267
                }
            }
        )
        asset inputs:opacity = @@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1102.9768, 1134.0562)
                    int stackingOrderInSubgraph = 314
                }
            }
        )
        asset inputs:roughness = @@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1489.6992, 366.7165)
                    int stackingOrderInSubgraph = 350
                }
            }
        )
        token outputs:mtlx:surface.connect = </Root/M_baseObjectMaterial/PBRSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

        def Shader "PBRSurface"
        {
            uniform token info:id = "ND_realitykit_pbr_surfaceshader"
            float inputs:ambientOcclusion.connect = </Root/M_baseObjectMaterial/Image_4.outputs:out>
            color3f inputs:baseColor.connect = </Root/M_baseObjectMaterial/Image.outputs:out>
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:emissiveColor.connect = </Root/M_baseObjectMaterial/Multiply_1.outputs:out>
            bool inputs:hasPremultipliedAlpha
            float inputs:metallic.connect = </Root/M_baseObjectMaterial/Image_3.outputs:out>
            float3 inputs:normal.connect = </Root/M_baseObjectMaterial/NormalMapDecode.outputs:out>
            float inputs:opacity.connect = </Root/M_baseObjectMaterial/Image_5.outputs:out>
            float inputs:opacityThreshold
            float inputs:roughness.connect = </Root/M_baseObjectMaterial/Multiply.outputs:out>
            float inputs:specular
            token outputs:out
            float2 ui:nodegraph:node:pos = (3.7539062, 494.0703)
            int ui:nodegraph:node:stackingOrder = 222
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:normal"]
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default
            asset inputs:file.connect = </Root/M_baseObjectMaterial.inputs:diffuse>
            float2 inputs:texcoord
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-330.58615, -230.41397)
            int ui:nodegraph:node:stackingOrder = 259
        }

        def Shader "Image_1"
        {
            uniform token info:id = "ND_image_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/M_baseObjectMaterial.inputs:normal>
            string inputs:filtertype
            float2 inputs:texcoord
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1152.386, 37.105606)
            int ui:nodegraph:node:stackingOrder = 267
        }

        def Shader "Image_2"
        {
            uniform token info:id = "ND_image_float"
            float inputs:default
            asset inputs:file.connect = </Root/M_baseObjectMaterial.inputs:roughness>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1131.718, 278.62534)
            int ui:nodegraph:node:stackingOrder = 953
        }

        def Shader "Image_3"
        {
            uniform token info:id = "ND_image_float"
            float inputs:default
            asset inputs:file.connect = </Root/M_baseObjectMaterial.inputs:metallic>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:vaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (-802.7424, 651.02496)
            int ui:nodegraph:node:stackingOrder = 314
        }

        def Shader "Image_4"
        {
            uniform token info:id = "ND_image_float"
            float inputs:default
            asset inputs:file.connect = </Root/M_baseObjectMaterial.inputs:ao>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:vaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (-801.60175, 861.85315)
            int ui:nodegraph:node:stackingOrder = 314
        }

        def Shader "Image_5"
        {
            uniform token info:id = "ND_image_float"
            float inputs:default
            asset inputs:file.connect = </Root/M_baseObjectMaterial.inputs:opacity>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:vaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (-797.73456, 1068.7047)
            int ui:nodegraph:node:stackingOrder = 314
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/M_baseObjectMaterial/Image_1.outputs:out>
            float inputs:in2 = 2
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-875.8335, 54.017212)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 268
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector3"
            float3 inputs:in1.connect = </Root/M_baseObjectMaterial/Multiply_2.outputs:out>
            float3 inputs:in2 = (1, 1, 1)
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-728.96985, 77.82822)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 269
        }

        def Shader "Image_6"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default
            asset inputs:file.connect = </Root/M_baseObjectMaterial.inputs:emissive>
            string inputs:filtertype
            float2 inputs:texcoord
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-764.01965, -152.2373)
            int ui:nodegraph:node:stackingOrder = 262
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_color3FA"
            color3f inputs:in1.connect = </Root/M_baseObjectMaterial/Image_6.outputs:out>
            float inputs:in2 = 0
            float inputs:in2.connect = </Root/M_baseObjectMaterial.inputs:emissiveAmount>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-485.71478, -25.011955)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 265
        }

        def Shader "NormalMapDecode"
        {
            uniform token info:id = "ND_normal_map_decode"
            float3 inputs:in.connect = </Root/M_baseObjectMaterial/Image_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-678.84375, 163.17969)
            int ui:nodegraph:node:stackingOrder = 317
        }

        def Shader "ConstantImageFile"
        {
            uniform token info:id = "ND_constant_filename"
            asset inputs:value = @../Assets/Lab/Object_upgrades/textures/scattered isolated fingerprints5 (fingerprints & dirt)_roughness.png@
            asset outputs:out
            float2 ui:nodegraph:node:pos = (-1807.1396, 378.44153)
            int ui:nodegraph:node:stackingOrder = 1175
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_float"
            float inputs:default
            asset inputs:file.connect = </Root/M_baseObjectMaterial/ConstantImageFile.outputs:out>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord
            float2 inputs:uvoffset
            float2 inputs:uvtiling.connect = </Root/M_baseObjectMaterial/Swizzle.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1470.2375, 554.9845)
            int ui:nodegraph:node:stackingOrder = 962
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/M_baseObjectMaterial/Image_2.outputs:out>
            float inputs:in2.connect = </Root/M_baseObjectMaterial/Range.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-889.2178, 402.82697)
            int ui:nodegraph:node:stackingOrder = 948
        }

        def Shader "Swizzle"
        {
            uniform token info:id = "ND_swizzle_float_vector2"
            prepend float inputs:in.connect = </Root/M_baseObjectMaterial.inputs:fingerPrintSize>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1710.1978, 562.2428)
            int ui:nodegraph:node:stackingOrder = 960
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp
            float inputs:gamma = 0.26304686
            float inputs:gamma.connect = </Root/M_baseObjectMaterial/fingerPrintAmount.outputs:out>
            float inputs:in.connect = </Root/M_baseObjectMaterial/TiledImage.outputs:out>
            float inputs:inhigh
            float inputs:inlow
            float inputs:outhigh
            float inputs:outlow
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1120.8698, 539.4485)
            int ui:nodegraph:node:stackingOrder = 1166
        }

        def Shader "fingerPrintAmount"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0.4
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1422.2911, 736.76733)
            int ui:nodegraph:node:stackingOrder = 1171
        }
    }
}

