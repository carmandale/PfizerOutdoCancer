#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.100.13)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Material "M_bloodVessel"
    {
        reorder nameChildren = ["Image", "baseColor", "PBRSurface", "Image_1", "Normal", "NormalMapDecode", "Image_2", "Roughness", "Range", "Multiply_5", "Constant_1", "Texcoord", "Sin_2", "Divide", "Multiply_7", "Combine3_2", "Multiply_3", "Noise3D", "Separate2", "Combine3", "Multiply", "Combine3_1", "Multiply_6", "Remap", "Separate2_2", "Sin_1", "Multiply_1", "GeometryModifier", "Position", "CameraPosition", "Mix", "MTLDistance", "Clamp", "Multiply_2", "Multiply_4", "Multiply_8", "Clamp_1", "Multiply_9", "Mix_1", "WorleyNoise2D", "Swizzle", "TextureCoordinates", "CellNoise3D", "Swizzle_1", "Fractal3D", "Swizzle_2", "Time_1", "Divide_1", "Add", "Sin", "Time", "Transform2D", "Combine2", "Multiply_10", "Swizzle_3"]
        token outputs:mtlx:surface.connect = </Root/M_bloodVessel/PBRSurface.outputs:out>
        token outputs:realitykit:vertex.connect = None
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1953.0419, -466.45074)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2264

        def Shader "Image"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default
            asset inputs:file.connect = </Root/M_bloodVessel/baseColor.outputs:out>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-538.5121, -423.6962)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "baseColor"
        {
            uniform token info:id = "ND_constant_filename"
            asset inputs:value = @../Assets/Blood Vessel/textures/Baked.png@
            asset outputs:out
            float2 ui:nodegraph:node:pos = (-853.61755, -503.27823)
            int ui:nodegraph:node:stackingOrder = 2501
        }

        def Shader "PBRSurface"
        {
            uniform token info:id = "ND_realitykit_pbr_surfaceshader"
            float inputs:ambientOcclusion
            color3f inputs:baseColor.connect = </Root/M_bloodVessel/Mix_1.outputs:out>
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:emissiveColor.connect = </Root/M_bloodVessel/Mix_1.outputs:out>
            bool inputs:hasPremultipliedAlpha
            float inputs:metallic
            float3 inputs:normal.connect = </Root/M_bloodVessel/NormalMapDecode.outputs:out>
            float inputs:opacity
            float inputs:opacityThreshold
            float inputs:roughness.connect = </Root/M_bloodVessel/Mix_2.outputs:out>
            float inputs:specular
            token outputs:out
            float2 ui:nodegraph:node:pos = (1405.5712, -473.8651)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Image_1"
        {
            uniform token info:id = "ND_image_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/M_bloodVessel/Normal.outputs:out>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-524.48083, -97.91886)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Normal"
        {
            uniform token info:id = "ND_constant_filename"
            asset inputs:value = @../Assets/Blood Vessel/textures/txt_bloodVessel_mat_Normal_baked.png@
            asset outputs:out
            float2 ui:nodegraph:node:pos = (-787.5394, -151.28214)
            int ui:nodegraph:node:stackingOrder = 2500
        }

        def Shader "NormalMapDecode"
        {
            uniform token info:id = "ND_normal_map_decode"
            float3 inputs:in.connect = </Root/M_bloodVessel/Image_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-224.25424, -137.96182)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Image_2"
        {
            uniform token info:id = "ND_image_float"
            float inputs:default
            asset inputs:file.connect = </Root/M_bloodVessel/Roughness.outputs:out>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:vaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (-391.4105, 124.460045)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Roughness"
        {
            uniform token info:id = "ND_constant_filename"
            asset inputs:value = @../Assets/Blood Vessel/textures/txt_bloodVessel_mat_Roughness_baked.jpg@
            asset outputs:out
            float2 ui:nodegraph:node:pos = (-744.67224, 89.47176)
            int ui:nodegraph:node:stackingOrder = 2499
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_color3"
            bool inputs:doclamp
            color3f inputs:gamma = (1, 1, 1) (
                colorSpace = "lin_srgb"
            )
            color3f inputs:in.connect = </Root/M_bloodVessel/Image.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-257.17612, -473.6376)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/M_bloodVessel/Divide.outputs:out>
            float inputs:in2.connect = </Root/M_bloodVessel/Multiply_7.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (32.924713, 900.5132)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Constant_1"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0, 0, 0)
            color3f inputs:value.connect = </Root/M_bloodVessel/Combine3_1.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (143.08914, 757.70856)
            float2 ui:nodegraph:node:size = (155, 53)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Texcoord"
        {
            uniform token info:id = "ND_texcoord_vector2"
            int inputs:index = 1
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1577.4271, 502.87704)
            float2 ui:nodegraph:node:size = (180.5, 53)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Sin_2"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/M_bloodVessel/Multiply_6.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-242.5599, 993.72235)
            float2 ui:nodegraph:node:size = (121.5, 53)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/M_bloodVessel/Noise3D.outputs:out>
            float inputs:in2 = 4
            float outputs:out
            float2 ui:nodegraph:node:pos = (-95.687965, 832.9745)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Multiply_7"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/M_bloodVessel/Sin_1.outputs:out>
            float inputs:in2.connect = </Root/M_bloodVessel/Sin_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-103.72593, 977.3209)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Combine3_2"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1
            float inputs:in2.connect = </Root/M_bloodVessel/Multiply_5.outputs:out>
            float inputs:in3
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (198.41031, 967.6068)
            float2 ui:nodegraph:node:size = (160, 54)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/M_bloodVessel/Separate2_2.outputs:outx>
            float inputs:in2 = 3.14
            float outputs:out
            float2 ui:nodegraph:node:pos = (-374.13998, 916.133)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Noise3D"
        {
            uniform token info:id = "ND_noise3d_float"
            float inputs:amplitude = 1.5
            float inputs:pivot = 0
            float3 inputs:position.connect = </Root/M_bloodVessel/Combine3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-315.48825, 711.6332)
            float2 ui:nodegraph:node:size = (105, 145)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/M_bloodVessel/Multiply.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-694.7096, 627.375)
            float2 ui:nodegraph:node:size = (115, 127)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1.connect = </Root/M_bloodVessel/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/M_bloodVessel/Separate2.outputs:outy>
            float inputs:in3.connect = </Root/M_bloodVessel/Divide_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-514.15753, 671.9264)
            float2 ui:nodegraph:node:size = (145, 54)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/M_bloodVessel/Transform2D.outputs:out>
            float2 inputs:in2 = (2, 2)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-828.3657, 655.45807)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Combine3_1"
        {
            uniform token info:id = "ND_combine3_color3"
            float inputs:in1.connect = </Root/M_bloodVessel/Noise3D.outputs:out>
            float inputs:in2.connect = </Root/M_bloodVessel/Noise3D.outputs:out>
            float inputs:in3.connect = </Root/M_bloodVessel/Noise3D.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-47.76596, 758.51074)
            float2 ui:nodegraph:node:size = (157, 54)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Multiply_6"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/M_bloodVessel/Separate2_2.outputs:outy>
            float inputs:in2 = 3.14
            float outputs:out
            float2 ui:nodegraph:node:pos = (-372.4736, 973.5057)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Remap"
        {
            uniform token info:id = "ND_remap_color3"
            color3f inputs:in.connect = </Root/M_bloodVessel/Constant_1.outputs:out>
            color3f inputs:inhigh
            color3f inputs:inlow
            color3f inputs:outhigh = (0.7823153, 0.4124047, 0.23366348) (
                colorSpace = "srgb_texture"
            )
            color3f inputs:outlow = (0.9007063, 0.7150861, 0.61799383) (
                colorSpace = "srgb_texture"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (324.59784, 593.37476)
            float2 ui:nodegraph:node:size = (94, 181)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Separate2_2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/M_bloodVessel/Transform2D.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-520.3112, 898.04315)
            float2 ui:nodegraph:node:size = (130.5, 127)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Sin_1"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/M_bloodVessel/Multiply_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-243.75998, 907.8897)
            float2 ui:nodegraph:node:size = (118, 53)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = None
            color3f inputs:in2.connect = </Root/M_bloodVessel/Remap.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (558.0571, 573.9883)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "GeometryModifier"
        {
            uniform token info:id = "ND_realitykit_geometrymodifier_2_0_vertexshader"
            float3 inputs:bitangent
            color4f inputs:color
            float3 inputs:modelPositionOffset.connect = </Root/M_bloodVessel/Combine3_2.outputs:out>
            float3 inputs:normal
            float4 inputs:uv6
            float4 inputs:uv7
            token outputs:out
            float2 ui:nodegraph:node:pos = (877.7469, 688.2842)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-543.0219, -821.465)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "CameraPosition"
        {
            uniform token info:id = "ND_realitykit_cameraposition_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-519.18146, -683.9934)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg.connect = </Root/M_bloodVessel/Multiply_4.outputs:out>
            color3f inputs:fg.connect = </Root/M_bloodVessel/Multiply_8.outputs:out>
            float inputs:mix.connect = </Root/M_bloodVessel/Clamp.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (659.7001, -560.4061)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "MTLDistance"
        {
            uniform token info:id = "ND_MTL_distance_vector3_float"
            float3 inputs:x.connect = </Root/M_bloodVessel/Position.outputs:out>
            float3 inputs:y.connect = </Root/M_bloodVessel/CameraPosition.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-242.12883, -782.136)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/M_bloodVessel/Multiply_2.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (123.18727, -706.6309)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/M_bloodVessel/MTLDistance.outputs:out>
            float inputs:in2 = 0.01
            float outputs:out
            float2 ui:nodegraph:node:pos = (-36.2309, -667.46893)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/M_bloodVessel/Range.outputs:out>
            color3f inputs:in2 = (0.36447704, 0.36447704, 0.36447704) (
                colorSpace = "lin_srgb"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (492.4302, -428.18094)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Multiply_8"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/M_bloodVessel/Range.outputs:out>
            color3f inputs:in2
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (430.88626, -502.93356)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Clamp_1"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/M_bloodVessel/Multiply_9.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (429.6136, -867.9828)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Multiply_9"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/M_bloodVessel/MTLDistance.outputs:out>
            float inputs:in2 = 0.1
            float outputs:out
            float2 ui:nodegraph:node:pos = (270.1954, -828.8208)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Mix_1"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg.connect = None
            color3f inputs:fg.connect = </Root/M_bloodVessel/Mix.outputs:out>
            float inputs:mix.connect = </Root/M_bloodVessel/Clamp_1.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (890.54913, -651.31213)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/M_bloodVessel/Add.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1414.5605, 887.5597)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/M_bloodVessel/Sin.outputs:out>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1488.014, 887.63477)
            float2 ui:nodegraph:node:size = (61.5, 36.5)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Sin"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/M_bloodVessel/Time.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1591.1862, 886.56647)
            float2 ui:nodegraph:node:size = (116, 40)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1843.9308, 816.4886)
            float2 ui:nodegraph:node:size = (122.5, 53)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Transform2D"
        {
            uniform token info:id = "ND_UsdTransform2d"
            float2 inputs:in.connect = </Root/M_bloodVessel/Texcoord.outputs:out>
            float inputs:rotation.connect = None
            float2 inputs:scale
            float2 inputs:translation = (0, 0)
            float2 inputs:translation.connect = </Root/M_bloodVessel/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1121.6543, 536.9173)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/M_bloodVessel/Multiply_10.outputs:out>
            float inputs:in2.connect = </Root/M_bloodVessel/Multiply_10.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1381.6261, 649.53644)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Multiply_10"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/M_bloodVessel/Time.outputs:out>
            float inputs:in2 = 0.05
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1628.4644, 702.97186)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Swizzle_3"
        {
            uniform token info:id = "ND_swizzle_float_color3"
            float inputs:in.connect = </Root/M_bloodVessel/Noise3D.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-47.60321, 584.51965)
            int ui:nodegraph:node:stackingOrder = 2498
        }

        def Shader "Fractal3D_1"
        {
            uniform token info:id = "ND_fractal3d_float"
            float inputs:amplitude = 1
            float inputs:diminish = 0.6
            float inputs:lacunarity = 3
            int inputs:octaves = 10
            float3 inputs:position
            float outputs:out
            float2 ui:nodegraph:node:pos = (92.26613, -416.5899)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/M_bloodVessel/Fractal3D_1.outputs:out>
            float inputs:in2.connect = </Root/M_bloodVessel/Image_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (654.90063, -252.36449)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Shader "Mix_2"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/M_bloodVessel/Image_2.outputs:out>
            float inputs:fg.connect = </Root/M_bloodVessel/Add_1.outputs:out>
            float inputs:mix = 0.4
            float outputs:out
            float2 ui:nodegraph:node:pos = (919.8382, -237.66565)
            int ui:nodegraph:node:stackingOrder = 2264
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Group"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_6", "p:Sin_2", "p:Multiply_1", "p:Multiply_10", "p:Noise3D", "p:Transform2D", "p:Combine3_2", "p:Combine2", "p:Add", "p:Time", "p:Multiply_7", "p:Multiply", "p:Multiply_5", "p:Swizzle_3", "p:Divide", "p:Constant_1", "p:Divide_1", "p:Multiply_3", "p:Separate2_2", "p:Remap", "p:Sin", "p:Combine3_1", "p:GeometryModifier", "p:Texcoord", "p:Combine3", "p:Separate2", "p:Sin_1"]
        }
    }
}

