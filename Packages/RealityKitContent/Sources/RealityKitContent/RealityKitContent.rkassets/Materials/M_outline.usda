#usda 1.0
(
    customLayerData = {
        string copyright = "Â©2023 Apple, Inc."
        string license = """Copyright (C) <<YEAR>> Apple Inc. All Rights Reserved.

IMPORTANT:  This Apple software is supplied to you by Apple
Inc. (\"Apple\") in consideration of your agreement to the following
terms, and your use, installation, modification or redistribution of
this Apple software constitutes acceptance of these terms.  If you do
not agree with these terms, please do not use, install, modify or
redistribute this Apple software.

In consideration of your agreement to abide by the following terms, and
subject to these terms, Apple grants you a personal, non-exclusive
license, under Apple's copyrights in this original Apple software (the
\"Apple Software\"), to use, reproduce, modify and redistribute the Apple
Software, with or without modifications, in source and/or binary forms;
provided that if you redistribute the Apple Software in its entirety and
without modifications, you must retain this notice and the following
text and disclaimers in all such redistributions of the Apple Software.
Neither the name, trademarks, service marks or logos of Apple Inc. may
be used to endorse or promote products derived from the Apple Software
without specific prior written permission from Apple.  Except as
expressly stated in this notice, no other rights or licenses, express or
implied, are granted by Apple herein, including but not limited to any
patent rights that may be infringed by your derivative works or by other
works in which the Apple Software may be incorporated.

The Apple Software is provided by Apple on an \"AS IS\" basis.  APPLE
MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND
OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.

IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION,
MODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED
AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE),
STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

"""
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def Material "M_outline"
    {
        token outputs:mtlx:surface.connect = </Root/M_outline/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/M_outline/mat_glow.outputs:surface>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2471.9978, 237.42552)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 5568

        def Shader "mat_glow" (
            active = false
        )
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0, 0.8, 0.8)
            normal3f inputs:normal = (1, 1, 1)
            float inputs:opacity = 0.5
            float inputs:roughness = 0.4
            color3f inputs:specularColor = (0.35, 0.35, 0.35)
            int inputs:useSpecularWorkflow = 1
            token outputs:displacement
            token outputs:surface
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor = (0, 0.8, 0.8) (
                colorSpace = "lin_srgb"
            )
            color3f inputs:diffuseColor.connect = None
            color3f inputs:emissiveColor = (0.5877874, 1, 0.99867344) (
                colorSpace = "Input - Texture - sRGB - Display P3"
            )
            color3f inputs:emissiveColor.connect = </Root/M_outline/Mix_1.outputs:out>
            float inputs:ior
            float inputs:metallic
            float3 inputs:normal
            float inputs:occlusion
            float inputs:opacity = 0.1
            float inputs:opacity.connect = </Root/M_outline/Mix_2.outputs:out>
            float inputs:opacityThreshold
            float inputs:roughness = 0.5
            float inputs:roughness.connect = None
            token outputs:out
            float2 ui:nodegraph:node:pos = (2224.1636, 185.46931)
            float2 ui:nodegraph:node:size = (159.5, 307)
            int ui:nodegraph:node:stackingOrder = 5570
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced", "inputs:emissiveColor"]
        }

        def Shader "ViewDirection"
        {
            uniform token info:id = "ND_realitykit_viewdirection_vector3"
            string inputs:space = "model"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-980.37415, 86.193794)
            float2 ui:nodegraph:node:size = (210, 53)
            int ui:nodegraph:node:stackingOrder = 5356
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp
            float inputs:gamma
            float inputs:in.connect = </Root/M_outline/SmoothStep.outputs:out>
            float inputs:inhigh
            float inputs:inlow
            float inputs:outhigh = 2
            float inputs:outlow
            float outputs:out
            float2 ui:nodegraph:node:pos = (51.05004, 51.133545)
            float2 ui:nodegraph:node:size = (98, 217)
            int ui:nodegraph:node:stackingOrder = 5364
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:outlow"]
        }

        def Shader "SmoothStep"
        {
            uniform token info:id = "ND_smoothstep_float"
            float inputs:in.connect = </Root/M_outline/DotProduct.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-207.66176, 50.552834)
            float2 ui:nodegraph:node:size = (127.5, 145)
            int ui:nodegraph:node:stackingOrder = 5366
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/M_outline/Normalize.outputs:out>
            float3 inputs:in2.connect = </Root/M_outline/Normalize_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-378.3796, 46.03965)
            float2 ui:nodegraph:node:size = (153.5, 53)
            int ui:nodegraph:node:stackingOrder = 5356
        }

        def Shader "Range_1"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp
            float inputs:gamma = 0.8
            float inputs:in.connect = </Root/M_outline/SmoothStep.outputs:out>
            float inputs:outhigh = 2
            float inputs:outlow = 0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (31.342884, 382.94443)
            float2 ui:nodegraph:node:size = (103.5, 217)
            int ui:nodegraph:node:stackingOrder = 5362
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in", "inputs:inhigh", "inputs:inlow"]
        }

        def Shader "Normal"
        {
            uniform token info:id = "ND_normal_vector3"
            string inputs:space = "model"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-953.5107, -33.72808)
            float2 ui:nodegraph:node:size = (128.5, 40)
            int ui:nodegraph:node:stackingOrder = 5356
        }

        def Shader "TransformNormal"
        {
            uniform token info:id = "ND_transformnormal_vector3"
            string inputs:fromspace = "world"
            float3 inputs:in.connect = </Root/M_outline/Normal.outputs:out>
            string inputs:tospace = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-741.81165, -67.17339)
            float2 ui:nodegraph:node:size = (158, 145)
            int ui:nodegraph:node:stackingOrder = 5356
        }

        def Shader "TransformVector"
        {
            uniform token info:id = "ND_transformvector_vector3"
            string inputs:fromspace = "world"
            float3 inputs:in.connect = </Root/M_outline/ViewDirection.outputs:out>
            string inputs:tospace = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-745.0382, 144.10785)
            float2 ui:nodegraph:node:size = (153.5, 145)
            int ui:nodegraph:node:stackingOrder = 5356
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:tospace"]
        }

        def Shader "Constant"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0, 0, 0) (
                colorSpace = "Input - Texture - sRGB - sRGB"
            )
            color3f inputs:value.connect = None
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (264.97314, 29.152777)
            float2 ui:nodegraph:node:size = (151, 53)
            int ui:nodegraph:node:stackingOrder = 5372
        }

        def Shader "Normalize_1"
        {
            uniform token info:id = "ND_normalize_vector3"
            float3 inputs:in.connect = </Root/M_outline/TransformVector.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-551.56165, 149.62738)
            float2 ui:nodegraph:node:size = (161, 53)
            int ui:nodegraph:node:stackingOrder = 5356
        }

        def Shader "Normalize"
        {
            uniform token info:id = "ND_normalize_vector3"
            float3 inputs:in.connect = </Root/M_outline/TransformNormal.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-560.99915, -30.685112)
            float2 ui:nodegraph:node:size = (149, 40)
            int ui:nodegraph:node:stackingOrder = 5356
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg.connect = </Root/M_outline/Constant_1.outputs:out>
            color3f inputs:fg.connect = </Root/M_outline/Power.outputs:out>
            float inputs:mix.connect = </Root/M_outline/Range_1.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (542.17975, 278.30176)
            float2 ui:nodegraph:node:size = (109, 145)
            int ui:nodegraph:node:stackingOrder = 5370
        }

        def Shader "Power"
        {
            uniform token info:id = "ND_power_color3FA"
            color3f inputs:in1.connect = </Root/M_outline/Constant.outputs:out>
            float inputs:in2.connect = </Root/M_outline/Range.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (311.9354, 158.0332)
            float2 ui:nodegraph:node:size = (123.5, 40)
            int ui:nodegraph:node:stackingOrder = 5356
        }

        def Shader "Constant_1"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0.999996, 1, 1) (
                colorSpace = "Input - Texture - sRGB - sRGB"
            )
            color3f inputs:value.connect = None
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (312.20392, 257.53937)
            float2 ui:nodegraph:node:size = (155, 53)
            int ui:nodegraph:node:stackingOrder = 5371
        }

        def Shader "Power_1"
        {
            uniform token info:id = "ND_power_color3FA"
            color3f inputs:in1.connect = </Root/M_outline/Constant_2.outputs:out>
            float inputs:in2.connect = </Root/M_outline/Range_2.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (534.15814, -147.44844)
            float2 ui:nodegraph:node:size = (135.5, 53)
            int ui:nodegraph:node:stackingOrder = 5356
        }

        def Shader "Constant_2"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0, 0.9914394, 1) (
                colorSpace = "Input - Texture - sRGB - sRGB"
            )
            color3f inputs:value.connect = None
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (335.46396, -418.20306)
            float2 ui:nodegraph:node:size = (158.5, 53)
            int ui:nodegraph:node:stackingOrder = 5358
        }

        def Shader "Range_2"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp
            float inputs:gamma
            float inputs:in.connect = </Root/M_outline/SmoothStep.outputs:out>
            float inputs:inhigh
            float inputs:inlow
            float inputs:outhigh = 2
            float inputs:outlow
            float outputs:out
            float2 ui:nodegraph:node:pos = (63.233707, -304.5255)
            float2 ui:nodegraph:node:size = (107, 217)
            int ui:nodegraph:node:stackingOrder = 5356
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:outlow"]
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_color3"
            color3f inputs:in.connect = </Root/M_outline/Mix.outputs:out>
            float outputs:outg
            float outputs:outr
            float2 ui:nodegraph:node:pos = (776.9059, 302.7391)
            float2 ui:nodegraph:node:size = (115.5, 145)
            int ui:nodegraph:node:stackingOrder = 5369
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_color3FA"
            color3f inputs:in1.connect = </Root/M_outline/Power_1.outputs:out>
            float inputs:in2 = 3
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (852.51215, -50.999866)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 5368
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
        }

        def Shader "HoverState"
        {
            uniform token info:id = "ND_realitykit_hover_state"
            float outputs:intensity
            bool outputs:isActive
            float3 outputs:position
            float outputs:timeSinceHoverStart
            float2 ui:nodegraph:node:pos = (516.0144, 17.759789)
            int ui:nodegraph:node:stackingOrder = 5558
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Sin"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/M_outline/HoverState.outputs:timeSinceHoverStart>
            float outputs:out
            float2 ui:nodegraph:node:pos = (855.1406, 170.6875)
            int ui:nodegraph:node:stackingOrder = 5527
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/M_outline/Sin.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (979.04297, 165.90234)
            int ui:nodegraph:node:stackingOrder = 5527
        }

        def Shader "Mix_1"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg.connect = </Root/M_outline/Multiply.outputs:out>
            color3f inputs:fg.connect = None
            float inputs:mix.connect = </Root/M_outline/Multiply_1.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (1545.7031, 120.03516)
            int ui:nodegraph:node:stackingOrder = 5566
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/M_outline/HoverState.outputs:intensity>
            float inputs:in2.connect = </Root/M_outline/Abs.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1122.6211, 131.44531)
            int ui:nodegraph:node:stackingOrder = 5527
        }

        def Shader "Mix_2"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/M_outline/Separate3.outputs:outr>
            float inputs:fg.connect = None
            float inputs:mix.connect = </Root/M_outline/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1330.125, 276.19922)
            int ui:nodegraph:node:stackingOrder = 5533
        }
    }

    def Sphere "Sphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/M_outline> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Sphere/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }
}

