#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "Attachments" (
        active = true
    )
    {
        def Xform "MicroscopeViewer" (
            active = false
        )
        {
            reorder nameChildren = ["MicroscopeReferenceSphere", "AudioLibrary", "SpatialAudio", "RCP_BehaviorsContainer", "diagnosticSphere"]
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (-0.019323876, 0.019323878, 0.70684266, 0.7068427)
            float3 xformOp:scale = (0.9999999, 0.9999999, 1.0000001)
            float3 xformOp:translate = (0.40769023, 1.3467324, -0.38462305)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Sphere "MicroscopeReferenceSphere" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Attachments/MicroscopeViewer/MicroscopeReferenceSphere/DefaultMaterial>
                double radius = 0.1
                float3 xformOp:scale = (1.0000001, 0.9999999, 1.0000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/Attachments/MicroscopeViewer/MicroscopeReferenceSphere/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        color3f inputs:diffuseColor = (0.08773714, 0.21834974, 1) (
                            colorSpace = "srgb_displayp3"
                        )
                        float inputs:metallic = 0
                        float inputs:opacity = 0
                        float inputs:opacityThreshold = 1
                        float inputs:roughness = 1
                        token outputs:surface
                    }
                }

                def RealityKitComponent "InputTarget"
                {
                    uniform token info:id = "RealityKit.InputTarget"
                }

                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Default"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (0.2, 0.2, 0.2)
                        float radius = 0.1
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitCustomComponent "RealityKitContent_MicroscopeViewerComponent"
                {
                    uniform token info:id = "RealityKitContent.MicroscopeViewerComponent"
                }

                def RealityKitComponent "RCP_BehaviorsContainer"
                {
                    rel behaviors = </Root/Attachments/MicroscopeViewer/MicroscopeReferenceSphere/OnCollision>
                    uniform token info:id = "RCP.BehaviorsContainer"
                }

                def Preliminary_Behavior "OnCollision"
                {
                    rel actions = </Root/Attachments/MicroscopeViewer/MicroscopeReferenceSphere/OnCollision/Action>
                    uniform bool exclusive
                    rel triggers = </Root/Attachments/MicroscopeViewer/MicroscopeReferenceSphere/OnCollision/Trigger>

                    def Preliminary_Trigger "Trigger"
                    {
                        rel affectedObjects = </Root/Attachments/MicroscopeViewer/MicroscopeReferenceSphere>
                        rel colliders = </Root/Attachments/MicroscopeViewer/MicroscopeReferenceSphere>
                        token info:id = "Collide"
                    }

                    def Preliminary_Action "Action"
                    {
                        rel affectedObjects = None
                        rel animationLibraryKey = None
                        rel animationLibraryKeyOverrideKey = </Root/Attachments/MicroscopeViewer/MicroscopeReferenceSphere/OnCollision/Trigger>
                        token info:id = "PlayTimeline"
                        int loops = 0
                        int performCount = 1
                        token type = "serial"
                    }
                }
            }

            def Sphere "diagnosticSphere" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (-7.952298e-16, -3.9696395e-16, -2.6146085e-11)
                }
            )
            {
                rel material:binding = </Root/Attachments/MicroscopeViewer/diagnosticSphere/DefaultMaterial>
                double radius = 0.1
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (1, -3.976149e-16, -1.9848197e-16, -1.3073043e-11)
                float3 xformOp:scale = (0.50873184, 0.5087318, 0.5087318)
                float3 xformOp:translate = (-0.28678966, -6.556511e-7, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/Attachments/MicroscopeViewer/diagnosticSphere/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0.8
                        color3f inputs:diffuseColor = (0.08773714, 0.21834974, 1) (
                            colorSpace = "srgb_displayp3"
                        )
                        float inputs:metallic = 0
                        float inputs:roughness = 0.5
                        token outputs:surface
                    }
                }

                def RealityKitComponent "InputTarget"
                {
                    uniform token info:id = "RealityKit.InputTarget"
                }

                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Default"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (0.2, 0.2, 0.2)
                        float radius = 0.1
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitCustomComponent "RealityKitContent_MicroscopeViewerComponent"
                {
                    uniform token info:id = "RealityKitContent.MicroscopeViewerComponent"
                }

                def RealityKitCustomComponent "RealityKitContent_GestureComponent"
                {
                    bool canRotate = 0
                    bool canScale = 0
                    uniform token info:id = "RealityKitContent.GestureComponent"
                    bool pivotOnDrag = 0
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["Sonic_Pulse_Hit_01.wav"]
                    rel values = </Root/Sonic_Pulse_Hit_01_wav>
                }
            }

            def RealityKitCustomComponent "RealityKitContent_MicroscopeViewerComponent"
            {
                uniform token info:id = "RealityKitContent.MicroscopeViewerComponent"
            }
        }

        def Xform "LibraryAttachment" (
            active = true
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-1, 1.3, -0.09937096)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Xform "ADCBuilderAttachment" (
            active = true
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.44456184, 1.5110943, -0.46554923)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Xform "AttackCancerAttachment" (
            active = true
        )
        {
            float2 ui:nodegraph:node:pos = (40, 40)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.15256336, 1.0100142, -0.6278293)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

