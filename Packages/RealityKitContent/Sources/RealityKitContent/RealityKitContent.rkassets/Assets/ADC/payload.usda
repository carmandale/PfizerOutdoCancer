#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["OuterSphere", "InnerSphere", "M_glow"]
    def Xform "Transform" (
        active = true
    )
    {
        reorder nameChildren = ["OuterSphere", "InnerSphere", "M_glow"]
        float3 xformOp:scale = (0.02, 0.02, 0.02)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "OuterSphere" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Transform/M_glow> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.45
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "InnerSphere" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Transform/InnerSphere/M_inner_glow>
            double radius = 0.3
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "M_inner_glow"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Transform/InnerSphere/M_inner_glow/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0, 0, 0) (
                        colorSpace = "srgb_texture"
                    )
                    color3f inputs:emissiveColor = (0.9994341, 1, 0.6556826) (
                        colorSpace = "srgb_texture"
                    )
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Material "M_glow"
        {
            token outputs:mtlx:surface.connect = </Root/Transform/M_glow/UnlitSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (405.0039, 24.082031)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 72

            def Shader "UnlitSurface"
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/Transform/M_glow/Constant.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:opacity.connect = </Root/Transform/M_glow/Range.outputs:out>
                float inputs:opacityThreshold
                token outputs:out
                float2 ui:nodegraph:node:pos = (166.88281, 44.39453)
                float2 ui:nodegraph:node:size = (194.5, 181)
                int ui:nodegraph:node:stackingOrder = 235
            }

            def Shader "ViewDirection"
            {
                uniform token info:id = "ND_realitykit_viewdirection_vector3"
                string inputs:space = "model"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-442.14844, 171.85938)
                float2 ui:nodegraph:node:size = (210, 53)
                int ui:nodegraph:node:stackingOrder = 236
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_normal_vector3"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-411.03906, 249.8711)
                float2 ui:nodegraph:node:size = (128.5, 40)
                int ui:nodegraph:node:stackingOrder = 235
            }

            def Shader "DotProduct"
            {
                uniform token info:id = "ND_dotproduct_vector3"
                float3 inputs:in1.connect = </Root/Transform/M_glow/ViewDirection.outputs:out>
                float3 inputs:in2.connect = </Root/Transform/M_glow/Normal.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-225.67969, 221.05469)
                float2 ui:nodegraph:node:size = (153.5, 53)
                int ui:nodegraph:node:stackingOrder = 235
            }

            def Shader "Range"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp
                float inputs:gamma = 0.3
                float inputs:in.connect = </Root/Transform/M_glow/DotProduct.outputs:out>
                float inputs:inhigh
                float inputs:inlow
                float inputs:outhigh
                float inputs:outlow
                float outputs:out
                float2 ui:nodegraph:node:pos = (-30.855469, 203.51953)
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 235
            }

            def Shader "Constant"
            {
                uniform token info:id = "ND_constant_color3"
                color3f inputs:value = (1, 0.80971503, 0.23296414) (
                    colorSpace = "srgb_texture"
                )
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-209.59961, -50.98242)
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 235
            }
        }
    }
}

