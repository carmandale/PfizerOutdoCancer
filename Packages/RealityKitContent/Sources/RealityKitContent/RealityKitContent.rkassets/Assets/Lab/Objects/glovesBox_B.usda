#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.2.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "glovesBox_B_mesh" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </root/M_baseObjectMaterial/M_baseObjectMaterial> (
            bindMaterialAs = "strongerThanDescendants"
        )
        custom string userProperties:blender:object_name = "glovesBox_B_mesh"
        custom string userProperties:currentUVSet = "map1"
        custom string userProperties:ma_rizom_tag = "glovesBox_B"
        custom int userProperties:selection_order = 0
        float3 xformOp:rotateXYZ = (-0.000016164857, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "glovesBox_B_mesh" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.13567805, -0.06942147, 0), (0.13567805, 0.069421455, 0.07190019)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [28, 7, 0, 1, 17, 5, 50, 30, 44, 0, 13, 3, 5, 14, 2, 22, 25, 24, 19, 17, 15, 8, 11, 10, 35, 39, 41, 14, 18, 20, 5, 3, 1, 37, 39, 40, 40, 38, 36, 43, 46, 45, 49, 53, 55, 51, 53, 54, 54, 52, 50, 13, 12, 9, 16, 18, 19, 0, 4, 6, 48, 47, 44, 42, 46, 48, 21, 25, 27, 7, 11, 13, 27, 26, 23, 29, 32, 31, 34, 33, 30, 28, 32, 34, 42, 2, 14, 55, 21, 49, 1, 23, 15, 37, 21, 8, 29, 48, 33, 34, 36, 38, 31, 0, 6, 2, 4, 5, 52, 36, 50, 54, 44, 47, 23, 12, 27, 49, 40, 52, 33, 44, 30, 35, 34, 38, 26, 16, 19, 15, 26, 19, 27, 8, 21, 41, 8, 10, 45, 16, 43, 14, 45, 42, 43, 54, 47, 2, 31, 6, 7, 41, 10, 22, 55, 51, 51, 16, 22, 3, 9, 1, 28, 35, 7, 1, 15, 17, 50, 36, 30, 0, 7, 13, 5, 17, 14, 22, 26, 25, 19, 18, 17, 8, 12, 11, 35, 38, 39, 14, 17, 18, 5, 4, 3, 37, 41, 39, 40, 39, 38, 43, 47, 46, 49, 52, 53, 51, 55, 53, 54, 53, 52, 13, 11, 12, 16, 20, 18, 0, 3, 4, 48, 46, 47, 42, 45, 46, 21, 24, 25, 7, 10, 11, 27, 25, 26, 29, 33, 32, 34, 32, 33, 28, 31, 32, 42, 29, 2, 55, 24, 21, 1, 9, 23, 37, 49, 21, 29, 42, 48, 34, 30, 36, 31, 28, 0, 2, 6, 4, 52, 40, 36, 54, 50, 44, 23, 9, 12, 49, 37, 40, 33, 48, 44, 35, 28, 34, 26, 22, 16, 15, 23, 26, 27, 12, 8, 41, 37, 8, 45, 20, 16, 14, 20, 45, 43, 51, 54, 2, 29, 31, 7, 35, 41, 22, 24, 55, 51, 43, 16, 3, 13, 9]
            rel material:binding = </root/_materials/storage_mat>
            normal3f[] normals = [(-0.99998, 0.0062609464, 0.0009119101), (-0.9999804, -0.0062209214, -0.0006656945), (-0.9999807, 0.006187111, -0.000663803), (-0.0068862266, 0.012720317, 0.99989533), (-0.0060423217, 0.9092356, 0.4162379), (0.00580959, 0.9093878, 0.4159087), (0.007065013, -0.012840718, -0.9998926), (-0.0069845417, 0.012847781, -0.9998931), (0.008588433, 0.011452228, -0.99989754), (-0.9999807, 0.006187111, -0.000663803), (-0.81150746, 0.018654317, 0.5840443), (-0.810688, -0.018991232, 0.58517027), (0.00580959, 0.9093878, 0.4159087), (0.0019391766, 0.9999981, 0.00042450428), (-0.001946032, 0.999998, 0.00047552772), (0.9999815, -0.006074935, -0.00008747727), (0.5339033, -0.7250519, 0.43502522), (0.593436, -0.8002942, 0.08580654), (0.8137976, -0.01839915, 0.58085716), (-0.0060423217, 0.9092356, 0.4162379), (0.008744396, 0.011668265, 0.99989367), (-0.0019053891, -0.99999815, 0.00047123618), (-0.5339077, -0.7250572, 0.43501103), (-0.59343106, -0.8002978, 0.085807696), (-0.99998295, -0.0058427304, 0.00018777698), (-0.5339018, -0.7250584, -0.43501616), (-0.5934266, -0.8003014, -0.08580589), (0.0019391766, 0.9999981, 0.00042450428), (0.5339544, 0.7250396, 0.43498313), (0.5935444, 0.800213, 0.085815), (0.00580959, 0.9093878, 0.4159087), (-0.810688, -0.018991232, 0.58517027), (-0.0068862266, 0.012720317, 0.99989533), (-0.0019163117, -0.99999803, -0.0004449878), (-0.5339018, -0.7250584, -0.43501616), (0.0062730163, -0.9090948, -0.41654193), (0.0062730163, -0.9090948, -0.41654193), (-0.8132318, 0.018584087, -0.58164304), (-0.007043645, -0.0126152, -0.99989563), (0.999983, 0.0058209747, 0.00022485852), (0.5339615, 0.72503626, -0.43497992), (0.5935616, 0.80020034, -0.08581475), (0.0019139275, -0.9999981, -0.00047726184), (0.5339021, -0.72505426, -0.43502265), (0.5934299, -0.8002989, -0.08580513), (0.99998254, -0.0059008896, 0.00017336011), (0.5339021, -0.72505426, -0.43502265), (0.8106866, 0.018585801, -0.58518535), (0.8106866, 0.018585801, -0.58518535), (-0.0058433264, -0.90939665, -0.41588888), (0.007065013, -0.012840718, -0.9998926), (-0.81150746, 0.018654317, 0.5840443), (0.005801633, -0.9093789, 0.41592836), (-0.008746009, -0.011658728, 0.99989384), (0.99998266, 0.0058812797, -0.00020232052), (0.5339544, 0.7250396, 0.43498313), (0.8137976, -0.01839915, 0.58085716), (-0.9999807, 0.006187111, -0.000663803), (-0.53388256, 0.7250753, 0.43501154), (-0.5934217, 0.8003053, 0.08580242), (-0.005898306, 0.909334, -0.4160252), (0.8132862, -0.018602327, -0.5815666), (0.008588433, 0.011452228, -0.99989754), (0.0019182302, 0.9999981, -0.00044650212), (0.5339615, 0.72503626, -0.43497992), (-0.005898306, 0.909334, -0.4160252), (0.0019484647, -0.9999979, 0.0005021896), (0.5339033, -0.7250519, 0.43502522), (-0.0063146055, -0.9091042, 0.41652074), (-0.9999804, -0.0062209214, -0.0006656945), (-0.5339077, -0.7250572, 0.43501103), (-0.81150746, 0.018654317, 0.5840443), (-0.0063146055, -0.9091042, 0.41652074), (0.81314284, 0.017646402, 0.58179665), (0.0070415437, -0.012621321, 0.9998956), (-0.0019158572, 0.99999803, -0.00047878735), (-0.5338935, 0.7250653, -0.43501502), (-0.59342796, 0.80030036, -0.08580601), (-0.8136393, -0.01743026, -0.5811086), (0.0058446974, 0.90940636, -0.41586784), (-0.0069845417, 0.012847781, -0.9998931), (-0.99998, 0.0062609464, 0.0009119101), (-0.5338935, 0.7250653, -0.43501502), (-0.8136393, -0.01743026, -0.5811086), (0.0019182302, 0.9999981, -0.00044650212), (-0.001946032, 0.999998, 0.00047552772), (0.0019391766, 0.9999981, 0.00042450428), (0.5934299, -0.8002989, -0.08580513), (0.0019484647, -0.9999979, 0.0005021896), (0.0019139275, -0.9999981, -0.00047726184), (-0.0068862266, 0.012720317, 0.99989533), (0.0070415437, -0.012621321, 0.9998956), (0.008744396, 0.011668265, 0.99989367), (-0.0019163117, -0.99999803, -0.0004449878), (0.0019484647, -0.9999979, 0.0005021896), (-0.0019053891, -0.99999815, 0.00047123618), (-0.0019158572, 0.99999803, -0.00047878735), (-0.005898306, 0.909334, -0.4160252), (0.0058446974, 0.90940636, -0.41586784), (-0.8136393, -0.01743026, -0.5811086), (-0.007043645, -0.0126152, -0.99989563), (-0.8132318, 0.018584087, -0.58164304), (-0.59342796, 0.80030036, -0.08580601), (-0.9999807, 0.006187111, -0.000663803), (-0.5934217, 0.8003053, 0.08580242), (-0.001946032, 0.999998, 0.00047552772), (-0.53388256, 0.7250753, 0.43501154), (0.00580959, 0.9093878, 0.4159087), (-0.0058433264, -0.90939665, -0.41588888), (-0.007043645, -0.0126152, -0.99989563), (0.007065013, -0.012840718, -0.9998926), (0.8106866, 0.018585801, -0.58518535), (0.008588433, 0.011452228, -0.99989754), (0.8132862, -0.018602327, -0.5815666), (0.0070415437, -0.012621321, 0.9998956), (0.005801633, -0.9093789, 0.41592836), (-0.0063146055, -0.9091042, 0.41652074), (0.0019139275, -0.9999981, -0.00047726184), (0.0062730163, -0.9090948, -0.41654193), (-0.0058433264, -0.90939665, -0.41588888), (0.0058446974, 0.90940636, -0.41586784), (0.008588433, 0.011452228, -0.99989754), (-0.0069845417, 0.012847781, -0.9998931), (-0.99998295, -0.0058427304, 0.00018777698), (-0.8136393, -0.01743026, -0.5811086), (-0.8132318, 0.018584087, -0.58164304), (0.81314284, 0.017646402, 0.58179665), (0.99998266, 0.0058812797, -0.00020232052), (0.8137976, -0.01839915, 0.58085716), (0.008744396, 0.011668265, 0.99989367), (0.81314284, 0.017646402, 0.58179665), (0.8137976, -0.01839915, 0.58085716), (-0.0063146055, -0.9091042, 0.41652074), (-0.0019053891, -0.99999815, 0.00047123618), (0.0019484647, -0.9999979, 0.0005021896), (-0.5934266, -0.8003014, -0.08580589), (-0.0019053891, -0.99999815, 0.00047123618), (-0.59343106, -0.8002978, 0.085807696), (0.5935616, 0.80020034, -0.08581475), (0.99998266, 0.0058812797, -0.00020232052), (0.999983, 0.0058209747, 0.00022485852), (0.0019391766, 0.9999981, 0.00042450428), (0.5935616, 0.80020034, -0.08581475), (0.0019182302, 0.9999981, -0.00044650212), (0.999983, 0.0058209747, 0.00022485852), (0.8106866, 0.018585801, -0.58518535), (0.8132862, -0.018602327, -0.5815666), (-0.001946032, 0.999998, 0.00047552772), (-0.59342796, 0.80030036, -0.08580601), (-0.5934217, 0.8003053, 0.08580242), (-0.9999804, -0.0062209214, -0.0006656945), (-0.5934266, -0.8003014, -0.08580589), (-0.59343106, -0.8002978, 0.085807696), (0.9999815, -0.006074935, -0.00008747727), (0.5934299, -0.8002989, -0.08580513), (0.99998254, -0.0059008896, 0.00017336011), (0.99998254, -0.0059008896, 0.00017336011), (0.99998266, 0.0058812797, -0.00020232052), (0.9999815, -0.006074935, -0.00008747727), (-0.810688, -0.018991232, 0.58517027), (-0.008746009, -0.011658728, 0.99989384), (-0.0068862266, 0.012720317, 0.99989533), (-0.99998, 0.0062609464, 0.0009119101), (-0.99998295, -0.0058427304, 0.00018777698), (-0.9999804, -0.0062209214, -0.0006656945), (-0.0068862266, 0.012720317, 0.99989533), (0.008744396, 0.011668265, 0.99989367), (-0.0060423217, 0.9092356, 0.4162379), (0.007065013, -0.012840718, -0.9998926), (-0.007043645, -0.0126152, -0.99989563), (-0.0069845417, 0.012847781, -0.9998931), (-0.9999807, 0.006187111, -0.000663803), (-0.9999804, -0.0062209214, -0.0006656945), (-0.81150746, 0.018654317, 0.5840443), (0.00580959, 0.9093878, 0.4159087), (-0.0060423217, 0.9092356, 0.4162379), (0.0019391766, 0.9999981, 0.00042450428), (0.9999815, -0.006074935, -0.00008747727), (0.81314284, 0.017646402, 0.58179665), (0.5339033, -0.7250519, 0.43502522), (0.8137976, -0.01839915, 0.58085716), (0.5339544, 0.7250396, 0.43498313), (-0.0060423217, 0.9092356, 0.4162379), (-0.0019053891, -0.99999815, 0.00047123618), (0.005801633, -0.9093789, 0.41592836), (-0.5339077, -0.7250572, 0.43501103), (-0.99998295, -0.0058427304, 0.00018777698), (-0.8132318, 0.018584087, -0.58164304), (-0.5339018, -0.7250584, -0.43501616), (0.0019391766, 0.9999981, 0.00042450428), (-0.0060423217, 0.9092356, 0.4162379), (0.5339544, 0.7250396, 0.43498313), (0.00580959, 0.9093878, 0.4159087), (-0.53388256, 0.7250753, 0.43501154), (-0.810688, -0.018991232, 0.58517027), (-0.0019163117, -0.99999803, -0.0004449878), (-0.5934266, -0.8003014, -0.08580589), (-0.5339018, -0.7250584, -0.43501616), (0.0062730163, -0.9090948, -0.41654193), (-0.5339018, -0.7250584, -0.43501616), (-0.8132318, 0.018584087, -0.58164304), (0.999983, 0.0058209747, 0.00022485852), (0.8132862, -0.018602327, -0.5815666), (0.5339615, 0.72503626, -0.43497992), (0.0019139275, -0.9999981, -0.00047726184), (-0.0058433264, -0.90939665, -0.41588888), (0.5339021, -0.72505426, -0.43502265), (0.99998254, -0.0059008896, 0.00017336011), (0.5934299, -0.8002989, -0.08580513), (0.5339021, -0.72505426, -0.43502265), (0.8106866, 0.018585801, -0.58518535), (0.5339021, -0.72505426, -0.43502265), (-0.0058433264, -0.90939665, -0.41588888), (-0.81150746, 0.018654317, 0.5840443), (-0.5339077, -0.7250572, 0.43501103), (0.005801633, -0.9093789, 0.41592836), (0.99998266, 0.0058812797, -0.00020232052), (0.5935444, 0.800213, 0.085815), (0.5339544, 0.7250396, 0.43498313), (-0.9999807, 0.006187111, -0.000663803), (-0.810688, -0.018991232, 0.58517027), (-0.53388256, 0.7250753, 0.43501154), (-0.005898306, 0.909334, -0.4160252), (0.5339615, 0.72503626, -0.43497992), (0.8132862, -0.018602327, -0.5815666), (0.0019182302, 0.9999981, -0.00044650212), (0.5935616, 0.80020034, -0.08581475), (0.5339615, 0.72503626, -0.43497992), (0.0019484647, -0.9999979, 0.0005021896), (0.593436, -0.8002942, 0.08580654), (0.5339033, -0.7250519, 0.43502522), (-0.9999804, -0.0062209214, -0.0006656945), (-0.59343106, -0.8002978, 0.085807696), (-0.5339077, -0.7250572, 0.43501103), (-0.0063146055, -0.9091042, 0.41652074), (0.5339033, -0.7250519, 0.43502522), (0.81314284, 0.017646402, 0.58179665), (-0.0019158572, 0.99999803, -0.00047878735), (0.0058446974, 0.90940636, -0.41586784), (-0.5338935, 0.7250653, -0.43501502), (-0.8136393, -0.01743026, -0.5811086), (-0.5338935, 0.7250653, -0.43501502), (0.0058446974, 0.90940636, -0.41586784), (-0.99998, 0.0062609464, 0.0009119101), (-0.59342796, 0.80030036, -0.08580601), (-0.5338935, 0.7250653, -0.43501502), (0.0019182302, 0.9999981, -0.00044650212), (-0.0019158572, 0.99999803, -0.00047878735), (-0.001946032, 0.999998, 0.00047552772), (0.5934299, -0.8002989, -0.08580513), (0.593436, -0.8002942, 0.08580654), (0.0019484647, -0.9999979, 0.0005021896), (-0.0068862266, 0.012720317, 0.99989533), (-0.008746009, -0.011658728, 0.99989384), (0.0070415437, -0.012621321, 0.9998956), (-0.0019163117, -0.99999803, -0.0004449878), (0.0019139275, -0.9999981, -0.00047726184), (0.0019484647, -0.9999979, 0.0005021896), (-0.0019158572, 0.99999803, -0.00047878735), (0.0019182302, 0.9999981, -0.00044650212), (-0.005898306, 0.909334, -0.4160252), (-0.8136393, -0.01743026, -0.5811086), (-0.0069845417, 0.012847781, -0.9998931), (-0.007043645, -0.0126152, -0.99989563), (-0.59342796, 0.80030036, -0.08580601), (-0.99998, 0.0062609464, 0.0009119101), (-0.9999807, 0.006187111, -0.000663803), (-0.001946032, 0.999998, 0.00047552772), (-0.5934217, 0.8003053, 0.08580242), (-0.53388256, 0.7250753, 0.43501154), (-0.0058433264, -0.90939665, -0.41588888), (0.0062730163, -0.9090948, -0.41654193), (-0.007043645, -0.0126152, -0.99989563), (0.8106866, 0.018585801, -0.58518535), (0.007065013, -0.012840718, -0.9998926), (0.008588433, 0.011452228, -0.99989754), (0.0070415437, -0.012621321, 0.9998956), (-0.008746009, -0.011658728, 0.99989384), (0.005801633, -0.9093789, 0.41592836), (0.0019139275, -0.9999981, -0.00047726184), (-0.0019163117, -0.99999803, -0.0004449878), (0.0062730163, -0.9090948, -0.41654193), (0.0058446974, 0.90940636, -0.41586784), (-0.005898306, 0.909334, -0.4160252), (0.008588433, 0.011452228, -0.99989754), (-0.99998295, -0.0058427304, 0.00018777698), (-0.99998, 0.0062609464, 0.0009119101), (-0.8136393, -0.01743026, -0.5811086), (0.81314284, 0.017646402, 0.58179665), (0.9999815, -0.006074935, -0.00008747727), (0.99998266, 0.0058812797, -0.00020232052), (0.008744396, 0.011668265, 0.99989367), (0.0070415437, -0.012621321, 0.9998956), (0.81314284, 0.017646402, 0.58179665), (-0.0063146055, -0.9091042, 0.41652074), (0.005801633, -0.9093789, 0.41592836), (-0.0019053891, -0.99999815, 0.00047123618), (-0.5934266, -0.8003014, -0.08580589), (-0.0019163117, -0.99999803, -0.0004449878), (-0.0019053891, -0.99999815, 0.00047123618), (0.5935616, 0.80020034, -0.08581475), (0.5935444, 0.800213, 0.085815), (0.99998266, 0.0058812797, -0.00020232052), (0.0019391766, 0.9999981, 0.00042450428), (0.5935444, 0.800213, 0.085815), (0.5935616, 0.80020034, -0.08581475), (0.999983, 0.0058209747, 0.00022485852), (0.99998254, -0.0059008896, 0.00017336011), (0.8106866, 0.018585801, -0.58518535), (-0.001946032, 0.999998, 0.00047552772), (-0.0019158572, 0.99999803, -0.00047878735), (-0.59342796, 0.80030036, -0.08580601), (-0.9999804, -0.0062209214, -0.0006656945), (-0.99998295, -0.0058427304, 0.00018777698), (-0.5934266, -0.8003014, -0.08580589), (0.9999815, -0.006074935, -0.00008747727), (0.593436, -0.8002942, 0.08580654), (0.5934299, -0.8002989, -0.08580513), (0.99998254, -0.0059008896, 0.00017336011), (0.999983, 0.0058209747, 0.00022485852), (0.99998266, 0.0058812797, -0.00020232052), (-0.810688, -0.018991232, 0.58517027), (-0.81150746, 0.018654317, 0.5840443), (-0.008746009, -0.011658728, 0.99989384)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.13567805, 0.06906682, 0.0711218), (-0.13512921, 0.06906682, 0.07190019), (-0.13512921, 0.069421425, 0.0711218), (-0.13551724, 0.06906682, 0.0716722), (-0.13544607, 0.06927155, 0.0715712), (-0.13512921, 0.069317564, 0.0716722), (-0.13551724, 0.069317564, 0.0711218), (-0.13567805, -0.06906685, 0.0711218), (-0.13512921, -0.06942147, 0.0711218), (-0.13512921, -0.06906685, 0.07190019), (-0.13551724, -0.06931761, 0.0711218), (-0.13544607, -0.069271594, 0.0715712), (-0.13512921, -0.06931761, 0.0716722), (-0.13551724, -0.06906685, 0.0716722), (0.13512921, 0.069421455, 0.0711218), (0.13512921, 0.06906685, 0.07190019), (0.13567793, 0.06906685, 0.0711218), (0.13512921, 0.069317594, 0.0716722), (0.13544607, 0.06927158, 0.0715712), (0.13551724, 0.06906685, 0.0716722), (0.13551724, 0.069317594, 0.0711218), (0.13512921, -0.06942144, 0.0711218), (0.13567805, -0.06906682, 0.0711218), (0.13512921, -0.06906682, 0.07190019), (0.13551724, -0.069317564, 0.0711218), (0.13544607, -0.06927155, 0.0715712), (0.13551724, -0.06906681, 0.0716722), (0.13512921, -0.069317564, 0.0716722), (-0.13567805, 0.06906682, 0.0007783957), (-0.13512921, 0.069421425, 0.0007783957), (-0.13512921, 0.06906682, 0), (-0.13551724, 0.06931755, 0.0007783994), (-0.13544607, 0.069271535, 0.00032899156), (-0.13512921, 0.06931755, 0.00022799149), (-0.13551724, 0.06906681, 0.00022799149), (-0.13567805, -0.06906685, 0.0007783957), (-0.13512921, -0.06906685, 0), (-0.13512921, -0.06942147, 0.0007783957), (-0.13551724, -0.06906685, 0.00022799149), (-0.13544607, -0.069271594, 0.00032899156), (-0.13512921, -0.06931761, 0.00022799149), (-0.13551724, -0.06931761, 0.0007783994), (0.13512921, 0.069421455, 0.0007783957), (0.13567793, 0.06906685, 0.0007783957), (0.13512921, 0.06906685, 0), (0.13551724, 0.069317594, 0.0007783994), (0.13544607, 0.06927158, 0.00032899156), (0.13551724, 0.06906685, 0.00022799149), (0.13512921, 0.069317594, 0.00022799149), (0.13512921, -0.06942144, 0.0007783957), (0.13512921, -0.06906682, 0), (0.13567805, -0.06906682, 0.0007783957), (0.13512921, -0.069317564, 0.00022799149), (0.13544607, -0.06927155, 0.00032899156), (0.13551724, -0.06906681, 0.00022799149), (0.13551724, -0.069317564, 0.0007783994)]
            texCoord2f[] primvars:st = [(0.004170209, 0.33720365), (0.13775463, 0.40523037), (0.004170209, 0.40523037), (0.3601652, 0.65175056), (0.62147045, 0.6520423), (0.3601652, 0.6520423), (0.65913844, 0.7938217), (0.39783332, 0.6602643), (0.65913844, 0.6602643), (0.004170209, 0.40523037), (0.13775463, 0.40574196), (0.004170209, 0.40574196), (0.39973977, 0.48272207), (0.1383824, 0.48221037), (0.39973977, 0.48221037), (0.0041702185, 0.48221037), (0.00390625, 0.48272207), (0.00390625, 0.48221037), (0.6218667, 0.65175056), (0.62147045, 0.6520423), (0.62147045, 0.65175056), (0.13838273, 0.40523037), (0.13801858, 0.40574196), (0.13801858, 0.40523037), (0.13775463, 0.33720365), (0.13801858, 0.33669207), (0.13801858, 0.33720365), (0.1383824, 0.48221037), (0.13801835, 0.48272207), (0.13801835, 0.48221037), (0.3601652, 0.6520423), (0.35976914, 0.65175056), (0.3601652, 0.65175056), (0.13838273, 0.33720365), (0.13801858, 0.33669207), (0.13838273, 0.33669207), (0.39783332, 0.7941134), (0.39743707, 0.7938217), (0.39783332, 0.7938217), (0.13775438, 0.41418377), (0.13801835, 0.41367206), (0.13801835, 0.41418377), (0.39974052, 0.33720365), (0.4001045, 0.33669207), (0.4001045, 0.33720365), (0.0041702185, 0.41418377), (0.00390625, 0.41367206), (0.0041702185, 0.41367206), (0.65953463, 0.7938217), (0.65913844, 0.7941134), (0.65913844, 0.7938217), (0.35976914, 0.51819307), (0.3601652, 0.5179013), (0.3601652, 0.51819307), (0.13775438, 0.48221037), (0.13801835, 0.48272207), (0.13775438, 0.48272207), (0.004170209, 0.40523037), (0.00390625, 0.40574196), (0.00390625, 0.40523037), (0.65913844, 0.6599724), (0.65953463, 0.6602643), (0.65913844, 0.6602643), (0.1383824, 0.41418377), (0.13801835, 0.41367206), (0.1383824, 0.41367206), (0.39974052, 0.40523037), (0.4001045, 0.40574196), (0.39974052, 0.40574196), (0.13775463, 0.40523037), (0.13801858, 0.40574196), (0.13775463, 0.40574196), (0.62147045, 0.5179013), (0.6218667, 0.51819307), (0.62147045, 0.51819307), (0.39973977, 0.41418377), (0.40010384, 0.41367206), (0.40010384, 0.41418377), (0.39743707, 0.6602643), (0.39783332, 0.6599724), (0.39783332, 0.6602643), (0.004170209, 0.33720365), (0.00390625, 0.33669207), (0.004170209, 0.33669207), (0.1383824, 0.41418377), (0.39973977, 0.48221037), (0.1383824, 0.48221037), (0.4001045, 0.33720365), (0.39974052, 0.40523037), (0.39974052, 0.33720365), (0.3601652, 0.65175056), (0.62147045, 0.51819307), (0.62147045, 0.65175056), (0.13838273, 0.33720365), (0.39974052, 0.40523037), (0.13838273, 0.40523037), (0.39973977, 0.41418377), (0.1383824, 0.41367206), (0.39973977, 0.41367206), (0.39743707, 0.6602643), (0.39783332, 0.7938217), (0.39743707, 0.7938217), (0.00390625, 0.33720365), (0.004170209, 0.40523037), (0.00390625, 0.40523037), (0.39973977, 0.48221037), (0.40010384, 0.48272207), (0.39973977, 0.48272207), (0.65913844, 0.7941134), (0.39783332, 0.7938217), (0.65913844, 0.7938217), (0.65953463, 0.7938217), (0.65913844, 0.6602643), (0.65953463, 0.6602643), (0.62147045, 0.51819307), (0.3601652, 0.5179013), (0.62147045, 0.5179013), (0.39974052, 0.33720365), (0.13838273, 0.33669207), (0.39974052, 0.33669207), (0.39783332, 0.6599724), (0.65913844, 0.6602643), (0.39783332, 0.6602643), (0.13775463, 0.33720365), (0.004170209, 0.33669207), (0.13775463, 0.33669207), (0.0041702185, 0.48272207), (0.13775438, 0.48221037), (0.13775438, 0.48272207), (0.62147045, 0.65175056), (0.6218667, 0.51819307), (0.6218667, 0.65175056), (0.39974052, 0.40574196), (0.13838273, 0.40523037), (0.39974052, 0.40523037), (0.13801858, 0.33720365), (0.13838273, 0.40523037), (0.13801858, 0.40523037), (0.13801835, 0.41418377), (0.13775438, 0.48221037), (0.13775438, 0.41418377), (0.1383824, 0.48221037), (0.13801835, 0.41418377), (0.1383824, 0.41418377), (0.13775438, 0.41418377), (0.0041702185, 0.41367206), (0.13775438, 0.41367206), (0.39973977, 0.48221037), (0.40010384, 0.41418377), (0.40010384, 0.48221037), (0.13775463, 0.40523037), (0.13801858, 0.33720365), (0.13801858, 0.40523037), (0.0041702185, 0.48221037), (0.00390625, 0.41418377), (0.0041702185, 0.41418377), (0.0041702185, 0.41418377), (0.13775438, 0.48221037), (0.0041702185, 0.48221037), (0.35976914, 0.65175056), (0.3601652, 0.51819307), (0.3601652, 0.65175056), (0.004170209, 0.33720365), (0.13775463, 0.33720365), (0.13775463, 0.40523037), (0.3601652, 0.65175056), (0.62147045, 0.65175056), (0.62147045, 0.6520423), (0.65913844, 0.7938217), (0.39783332, 0.7938217), (0.39783332, 0.6602643), (0.004170209, 0.40523037), (0.13775463, 0.40523037), (0.13775463, 0.40574196), (0.39973977, 0.48272207), (0.1383824, 0.48272207), (0.1383824, 0.48221037), (0.0041702185, 0.48221037), (0.0041702185, 0.48272207), (0.00390625, 0.48272207), (0.6218667, 0.65175056), (0.6218667, 0.6520423), (0.62147045, 0.6520423), (0.13838273, 0.40523037), (0.13838273, 0.40574196), (0.13801858, 0.40574196), (0.13775463, 0.33720365), (0.13775463, 0.33669207), (0.13801858, 0.33669207), (0.1383824, 0.48221037), (0.1383824, 0.48272207), (0.13801835, 0.48272207), (0.3601652, 0.6520423), (0.35976914, 0.6520423), (0.35976914, 0.65175056), (0.13838273, 0.33720365), (0.13801858, 0.33720365), (0.13801858, 0.33669207), (0.39783332, 0.7941134), (0.39743707, 0.7941134), (0.39743707, 0.7938217), (0.13775438, 0.41418377), (0.13775438, 0.41367206), (0.13801835, 0.41367206), (0.39974052, 0.33720365), (0.39974052, 0.33669207), (0.4001045, 0.33669207), (0.0041702185, 0.41418377), (0.00390625, 0.41418377), (0.00390625, 0.41367206), (0.65953463, 0.7938217), (0.65953463, 0.7941134), (0.65913844, 0.7941134), (0.35976914, 0.51819307), (0.35976914, 0.5179013), (0.3601652, 0.5179013), (0.13775438, 0.48221037), (0.13801835, 0.48221037), (0.13801835, 0.48272207), (0.004170209, 0.40523037), (0.004170209, 0.40574196), (0.00390625, 0.40574196), (0.65913844, 0.6599724), (0.65953463, 0.6599724), (0.65953463, 0.6602643), (0.1383824, 0.41418377), (0.13801835, 0.41418377), (0.13801835, 0.41367206), (0.39974052, 0.40523037), (0.4001045, 0.40523037), (0.4001045, 0.40574196), (0.13775463, 0.40523037), (0.13801858, 0.40523037), (0.13801858, 0.40574196), (0.62147045, 0.5179013), (0.6218667, 0.5179013), (0.6218667, 0.51819307), (0.39973977, 0.41418377), (0.39973977, 0.41367206), (0.40010384, 0.41367206), (0.39743707, 0.6602643), (0.39743707, 0.6599724), (0.39783332, 0.6599724), (0.004170209, 0.33720365), (0.00390625, 0.33720365), (0.00390625, 0.33669207), (0.1383824, 0.41418377), (0.39973977, 0.41418377), (0.39973977, 0.48221037), (0.4001045, 0.33720365), (0.4001045, 0.40523037), (0.39974052, 0.40523037), (0.3601652, 0.65175056), (0.3601652, 0.51819307), (0.62147045, 0.51819307), (0.13838273, 0.33720365), (0.39974052, 0.33720365), (0.39974052, 0.40523037), (0.39973977, 0.41418377), (0.1383824, 0.41418377), (0.1383824, 0.41367206), (0.39743707, 0.6602643), (0.39783332, 0.6602643), (0.39783332, 0.7938217), (0.00390625, 0.33720365), (0.004170209, 0.33720365), (0.004170209, 0.40523037), (0.39973977, 0.48221037), (0.40010384, 0.48221037), (0.40010384, 0.48272207), (0.65913844, 0.7941134), (0.39783332, 0.7941134), (0.39783332, 0.7938217), (0.65953463, 0.7938217), (0.65913844, 0.7938217), (0.65913844, 0.6602643), (0.62147045, 0.51819307), (0.3601652, 0.51819307), (0.3601652, 0.5179013), (0.39974052, 0.33720365), (0.13838273, 0.33720365), (0.13838273, 0.33669207), (0.39783332, 0.6599724), (0.65913844, 0.6599724), (0.65913844, 0.6602643), (0.13775463, 0.33720365), (0.004170209, 0.33720365), (0.004170209, 0.33669207), (0.0041702185, 0.48272207), (0.0041702185, 0.48221037), (0.13775438, 0.48221037), (0.62147045, 0.65175056), (0.62147045, 0.51819307), (0.6218667, 0.51819307), (0.39974052, 0.40574196), (0.13838273, 0.40574196), (0.13838273, 0.40523037), (0.13801858, 0.33720365), (0.13838273, 0.33720365), (0.13838273, 0.40523037), (0.13801835, 0.41418377), (0.13801835, 0.48221037), (0.13775438, 0.48221037), (0.1383824, 0.48221037), (0.13801835, 0.48221037), (0.13801835, 0.41418377), (0.13775438, 0.41418377), (0.0041702185, 0.41418377), (0.0041702185, 0.41367206), (0.39973977, 0.48221037), (0.39973977, 0.41418377), (0.40010384, 0.41418377), (0.13775463, 0.40523037), (0.13775463, 0.33720365), (0.13801858, 0.33720365), (0.0041702185, 0.48221037), (0.00390625, 0.48221037), (0.00390625, 0.41418377), (0.0041702185, 0.41418377), (0.13775438, 0.41418377), (0.13775438, 0.48221037), (0.35976914, 0.65175056), (0.35976914, 0.51819307), (0.3601652, 0.51819307)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            custom string userProperties:blender:data_name = "glovesBox_B_mesh"
        }
    }

    def Scope "_materials"
    {
        def Material "storage_mat"
        {
            token outputs:mtlx:surface.connect = </root/_materials/storage_mat/ND_standard_surface_surfaceshader.outputs:surface>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </root/_materials/storage_mat/Principled_BSDF.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (392.25, 444)
            custom string userProperties:blender:data_name = "storage_mat"

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/storage_mat/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic.connect = </root/_materials/storage_mat/Image_Texture_001.outputs:r>
                float3 inputs:normal.connect = </root/_materials/storage_mat/Image_Texture_003.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </root/_materials/storage_mat/Image_Texture_002.outputs:r>
                float inputs:specular = 0.5
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/storage_mat_BaseColor.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/storage_mat/Mapping.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "Mapping"
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </root/_materials/storage_mat/uvmap.outputs:result>
                float inputs:rotation = 0
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/storage_mat_Metallic.jpg@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </root/_materials/storage_mat/Mapping.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "Image_Texture_002"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/storage_mat_Roughness.jpg@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </root/_materials/storage_mat/Mapping.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "Image_Texture_003"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, -1, -1, -1)
                asset inputs:file = @./textures/storage_mat_Normal.jpg@
                float4 inputs:scale = (2, 2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </root/_materials/storage_mat/Mapping.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "ND_standard_surface_surfaceshader"
            {
                uniform token info:id = "ND_standard_surface_surfaceshader"
                float inputs:base = 1
                color3f inputs:base_color.connect = </root/_materials/storage_mat/NodeGraphs/node7.outputs:out>
                float inputs:coat = 0
                float inputs:coat_affect_color
                float inputs:coat_affect_roughness
                float inputs:coat_anisotropy = 0
                color3f inputs:coat_color = (1, 1, 1)
                float inputs:coat_IOR = 1.5
                float3 inputs:coat_normal
                float inputs:coat_rotation = 0
                float inputs:coat_roughness = 0.03
                float inputs:diffuse_roughness.connect = </root/_materials/storage_mat/NodeGraphs/node11.outputs:out>
                float inputs:emission = 0
                color3f inputs:emission_color = (1, 1, 1)
                float inputs:metalness.connect = </root/_materials/storage_mat/NodeGraphs/node9.outputs:out>
                float3 inputs:normal.connect = </root/_materials/storage_mat/NodeGraphs/Normal_Map.outputs:out>
                color3f inputs:opacity = (1, 1, 1)
                float inputs:sheen = 0
                color3f inputs:sheen_color = (1, 1, 1)
                float inputs:sheen_roughness = 0.5
                float inputs:specular = 0.5
                float inputs:specular_anisotropy = 0
                color3f inputs:specular_color = (1, 1, 1)
                float inputs:specular_IOR = 1.5
                float inputs:specular_rotation = 0
                float inputs:specular_roughness.connect = </root/_materials/storage_mat/NodeGraphs/node11.outputs:out>
                float inputs:subsurface = 0
                float inputs:subsurface_anisotropy = 0
                color3f inputs:subsurface_color.connect = </root/_materials/storage_mat/NodeGraphs/node7.outputs:out>
                color3f inputs:subsurface_radius = (0.05, 0.01, 0.005)
                float inputs:subsurface_scale
                float3 inputs:tangent
                float inputs:thin_film_IOR = 1.33
                float inputs:thin_film_thickness = 0
                bool inputs:thin_walled
                float inputs:transmission = 0
                color3f inputs:transmission_color.connect = </root/_materials/storage_mat/NodeGraphs/node7.outputs:out>
                float inputs:transmission_depth
                float inputs:transmission_dispersion
                float inputs:transmission_extra_roughness.connect = </root/_materials/storage_mat/NodeGraphs/node11.outputs:out>
                color3f inputs:transmission_scatter
                float inputs:transmission_scatter_anisotropy
                token outputs:surface
                float2 ui:nodegraph:node:pos = (122, 444)
            }

            def "NodeGraphs"
            {
                def Shader "Texture_Coordinate_UV"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                }

                def Shader "node1"
                {
                    uniform token info:id = "ND_convert_vector2_vector3"
                    float2 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/Texture_Coordinate_UV.outputs:out>
                    float3 outputs:out
                }

                def Shader "node2"
                {
                    uniform token info:id = "ND_multiply_vector3"
                    float3 inputs:in1.connect = </root/_materials/storage_mat/NodeGraphs/node1.outputs:out>
                    float3 inputs:in2 = (1, 1, 1)
                    float3 outputs:out
                }

                def Shader "node3"
                {
                    uniform token info:id = "ND_rotate3d_vector3"
                    float inputs:amount = 0
                    float3 inputs:axis = (1, 0, 0)
                    float3 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/node2.outputs:out>
                    float3 outputs:out
                }

                def Shader "node4"
                {
                    uniform token info:id = "ND_rotate3d_vector3"
                    float inputs:amount = 0
                    float3 inputs:axis = (0, 1, 0)
                    float3 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/node3.outputs:out>
                    float3 outputs:out
                }

                def Shader "node5"
                {
                    uniform token info:id = "ND_rotate3d_vector3"
                    float inputs:amount = 0
                    float3 inputs:axis = (0, 0, 1)
                    float3 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/node4.outputs:out>
                    float3 outputs:out
                }

                def Shader "Mapping"
                {
                    uniform token info:id = "ND_add_vector3"
                    float3 inputs:in1.connect = </root/_materials/storage_mat/NodeGraphs/node5.outputs:out>
                    float3 inputs:in2 = (0, 0, 0)
                    float3 outputs:out
                }

                def Shader "node6"
                {
                    uniform token info:id = "ND_convert_vector3_vector2"
                    float3 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/Mapping.outputs:out>
                    float2 outputs:out
                }

                def Shader "Image_Texture_Color"
                {
                    uniform token info:id = "ND_image_color4"
                    asset inputs:file = @./textures/storage_mat_BaseColor.jpg@ (
                        colorSpace = "srgb_texture"
                    )
                    string inputs:filtertype = "linear"
                    float2 inputs:texcoord.connect = </root/_materials/storage_mat/NodeGraphs/node6.outputs:out>
                    string inputs:uaddressmode = "periodic"
                    string inputs:vaddressmode = "periodic"
                    color4f outputs:out
                }

                def Shader "node7"
                {
                    uniform token info:id = "ND_convert_color4_color3"
                    color4f inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/Image_Texture_Color.outputs:out>
                    color3f outputs:out
                }

                def Shader "node8"
                {
                    uniform token info:id = "ND_convert_vector3_vector2"
                    float3 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/Mapping.outputs:out>
                    float2 outputs:out
                }

                def Shader "Image_Texture_001_Color"
                {
                    uniform token info:id = "ND_image_vector4"
                    asset inputs:file = @./textures/storage_mat_Metallic.jpg@
                    string inputs:filtertype = "linear"
                    float2 inputs:texcoord.connect = </root/_materials/storage_mat/NodeGraphs/node8.outputs:out>
                    string inputs:uaddressmode = "periodic"
                    string inputs:vaddressmode = "periodic"
                    float4 outputs:out
                }

                def Shader "node9"
                {
                    uniform token info:id = "ND_extract_vector4"
                    float4 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/Image_Texture_001_Color.outputs:out>
                    int inputs:index = 0
                    float outputs:out
                }

                def Shader "node10"
                {
                    uniform token info:id = "ND_convert_vector3_vector2"
                    float3 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/Mapping.outputs:out>
                    float2 outputs:out
                }

                def Shader "Image_Texture_002_Color"
                {
                    uniform token info:id = "ND_image_vector4"
                    asset inputs:file = @./textures/storage_mat_Roughness.jpg@
                    string inputs:filtertype = "linear"
                    float2 inputs:texcoord.connect = </root/_materials/storage_mat/NodeGraphs/node10.outputs:out>
                    string inputs:uaddressmode = "periodic"
                    string inputs:vaddressmode = "periodic"
                    float4 outputs:out
                }

                def Shader "node11"
                {
                    uniform token info:id = "ND_extract_vector4"
                    float4 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/Image_Texture_002_Color.outputs:out>
                    int inputs:index = 0
                    float outputs:out
                }

                def Shader "node12"
                {
                    uniform token info:id = "ND_convert_vector3_vector2"
                    float3 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/Mapping.outputs:out>
                    float2 outputs:out
                }

                def Shader "Image_Texture_003_Color"
                {
                    uniform token info:id = "ND_image_vector4"
                    asset inputs:file = @./textures/storage_mat_Normal.jpg@
                    string inputs:filtertype = "linear"
                    float2 inputs:texcoord.connect = </root/_materials/storage_mat/NodeGraphs/node12.outputs:out>
                    string inputs:uaddressmode = "periodic"
                    string inputs:vaddressmode = "periodic"
                    float4 outputs:out
                }

                def Shader "node13"
                {
                    uniform token info:id = "ND_convert_vector4_vector3"
                    float4 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/Image_Texture_003_Color.outputs:out>
                    float3 outputs:out
                }

                def Shader "Normal_Map"
                {
                    uniform token info:id = "ND_normalmap"
                    float3 inputs:in.connect = </root/_materials/storage_mat/NodeGraphs/node13.outputs:out>
                    float inputs:scale = 1
                    string inputs:space = "tangent"
                    float3 outputs:out
                }
            }
        }
    }

    def "M_baseObjectMaterial" (
        active = true
        prepend references = @../../../Materials/M_baseObjectMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)

        over "M_baseObjectMaterial"
        {
            asset inputs:diffuse = @textures/storage_mat_BaseColor.jpg@
            asset inputs:metallic = @textures/storage_mat_Metallic.jpg@
            asset inputs:normal = @textures/storage_mat_Normal.jpg@
            asset inputs:roughness = @textures/storage_mat_Roughness.jpg@
        }
    }
}

